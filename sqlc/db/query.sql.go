// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name) VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, name)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getArticle = `-- name: GetArticle :one

SELECT
	article.id id,
	article.name article_name,
	users.name user_name
FROM
	article
	JOIN users ON article.user_id = users.id
WHERE
	article.id = $1
LIMIT 1
`

type GetArticleRow struct {
	ID          int32
	ArticleName string
	UserName    string
}

// Article
func (q *Queries) GetArticle(ctx context.Context, id int32) (GetArticleRow, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i GetArticleRow
	err := row.Scan(&i.ID, &i.ArticleName, &i.UserName)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT id, name FROM users
WHERE id = $1 LIMIT 1
`

// User
func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUserArticles = `-- name: GetUserArticles :many

SELECT
	users.id AS user_id,
	users.name AS user_name,
	article.id AS article_id,
	article.name AS article_name
FROM
	users
	LEFT JOIN article ON users.id = article.user_id
ORDER BY
	users.id
`

type GetUserArticlesRow struct {
	UserID      int32
	UserName    string
	ArticleID   sql.NullInt32
	ArticleName sql.NullString
}

// UserArticle
func (q *Queries) GetUserArticles(ctx context.Context) ([]GetUserArticlesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserArticlesRow
	for rows.Next() {
		var i GetUserArticlesRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.ArticleID,
			&i.ArticleName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT id, name FROM users
ORDER BY id
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :execrows
UPDATE users SET name = $2
WHERE id = $1
`

type UpdateUserParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Name)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
